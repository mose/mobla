<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Moselog</title>
    <link>http://blog.mose.com/</link>
    <description>Recent content on Moselog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 20 Mar 2016 22:10:31 +0800</lastBuildDate>
    <atom:link href="http://blog.mose.com/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Greenruby 163</title>
      <link>http://blog.mose.com/2016/03/20/greenruby-163</link>
      <pubDate>Sun, 20 Mar 2016 22:10:31 +0800</pubDate>
      
      <guid>http://blog.mose.com/2016/03/20/greenruby-163</guid>
      <description>

&lt;h2 id=&#34;no-rant-this-week:db8cdf835bd9f38d6f3130fd681dae2e&#34;&gt;No rant this week&lt;/h2&gt;

&lt;p&gt;Well it&amp;rsquo;s not the first time. I just don&amp;rsquo;t feel inspired. So I better shut up
rather than writing useless rant. It&amp;rsquo;s so easy to fill up space with
meaningless content. But I&amp;rsquo;m not doing that ever. I only speak out when I have
something to say. And yes, I&amp;rsquo;m very comfortable to contradict myself by
writing a useless rant. This is the beauty of the human being: our ability to
abstract makes possible all sort of paradoxes. Wait, is it related to
abstractions? hmm, This is a great topic for my day-dreaming in the subway.
Oh, damn I&amp;rsquo;m late. Cya all and have a good week.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Greenruby 162</title>
      <link>http://blog.mose.com/2016/03/13/greenruby-162</link>
      <pubDate>Sun, 13 Mar 2016 22:10:31 +0800</pubDate>
      
      <guid>http://blog.mose.com/2016/03/13/greenruby-162</guid>
      <description>

&lt;h2 id=&#34;the-adwar:debed575b05619529113f9bc1dd797c9&#34;&gt;the Adwar&lt;/h2&gt;

&lt;p&gt;This week I got 2 links that explore both sides of the adwar. The war on
advertisement exists on the web since it became popular enough to attract
advertisers. &lt;a href=&#34;https://github.com/fivefilters/block-ads/wiki/There-are-no-acceptable-ads&#34;&gt;There are no acceptable ads&lt;/a&gt; takes the side of the users,
while &lt;a href=&#34;https://www.smashingmagazine.com/2016/03/never-ending-story-ad-blockers&#34;&gt;A Never-Ending Story On Ad-Blockers&lt;/a&gt; seems to defend and
advise the publishers.&lt;/p&gt;

&lt;p&gt;Some media already have blocked the blockers. It&amp;rsquo;s forbidden to escape ads?
This position may appear not to be sustainable. And pushing towards content
sponsoring could have really bad ill effects on the long term. Is there any
escape? Honestly I have to say that I&amp;rsquo;m partial in that debate. I don&amp;rsquo;t like
ads on what I read, and I don&amp;rsquo;t like ads on what I publish. I even go edit my
/etc/hosts with some custom domains to resolve to 127.0.0.1 sometimes.&lt;/p&gt;

&lt;p&gt;So it there was to take sides, I would say advertiser, go to hell. But I&amp;rsquo;m a
realist. They won&amp;rsquo;t go away. We live in a society where shit has to be bought.
Yes even if you don&amp;rsquo;t need it. Otherwise the system will collapse. That&amp;rsquo;s how
things are. I get some crazy dreams about some &lt;a href=&#34;https://en.wikipedia.org/wiki/Basic_income&#34;&gt;basic income&lt;/a&gt;
system, currently &lt;a href=&#34;https://en.wikipedia.org/wiki/Basic_income_around_the_world&#34;&gt;in experiment&lt;/a&gt; in various places over the
globe. Such setup would defeat part of this situation, even if it would have
border effects that are unpredictable. But that would not change much for the
big corpo, it would only save the small people. Hmm. Sounds good enough to me,
I won&amp;rsquo;t lie.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Greenruby 160</title>
      <link>http://blog.mose.com/2016/02/28/greenruby-160</link>
      <pubDate>Sun, 28 Feb 2016 22:10:31 +0800</pubDate>
      
      <guid>http://blog.mose.com/2016/02/28/greenruby-160</guid>
      <description>

&lt;h2 id=&#34;about-tests-and-documentation:329bfb00efd0c1fb86f4a0195e637cef&#34;&gt;About tests and documentation&lt;/h2&gt;

&lt;p&gt;This aspect of development, called Documentation, is the source of various
frustrations. It&amp;rsquo;s hard to get do it, but why? My feeling is that it&amp;rsquo;s like
testing. When you begin your craft as a coder, all what matters is the code.
It&amp;rsquo;s only after some iterations that some non-code aspects come back bite you
in the neck. Like, huho, now that I need to refactor, I really should use
something that tells me if all still works. Tests become an early necessity to
anyone who knows that kind of truth. If you wait until the end of a coding
cycle to write those, the task is huge and it cuts you from your productivity
cycle. Write them early, along the flow, is way easier.&lt;/p&gt;

&lt;p&gt;So I think documentation follows the same pattern. So many software projects
are badly documented because this aspect is postponed until it&amp;rsquo;s needed. Means
at release stage. In early stages, you work on a prototype and you don&amp;rsquo;t need
to explain how things work or are supposed to work. And when it&amp;rsquo;s released,
there is usually some other task waiting and it&amp;rsquo;s hard to stop everything to
get back and document things properly. It may be a flaw in the agile process,
but it may also be a feature: if you don&amp;rsquo;t document along the way, you won&amp;rsquo;t
document much.&lt;/p&gt;

&lt;p&gt;Personally I try to consider the documentation of any of the source code I
write as one of the first tasks. There are various tricks that can help in
that perspective, like &lt;a href=&#34;http://tom.preston-werner.com/2010/08/23/readme-driven-development.html&#34;&gt;readme-driven development&lt;/a&gt;, or including the doc
inside the code with &lt;a href=&#34;http://yardoc.org/&#34;&gt;yarddoc&lt;/a&gt; or &lt;a href=&#34;http://ilyabylich.svbtle.com/apipie-amazing-tool-for-documenting-your-rails-api&#34;&gt;apipie&lt;/a&gt;, or coupling
documentation with tests with &lt;a href=&#34;https://www.relishapp.com/zipmark/rspec-api-documentation/docs/generate-html-documentation-from-test-examples&#34;&gt;rspec&lt;/a&gt; or &lt;a href=&#34;https://github.com/zipmark/rspec_api_documentation&#34;&gt;RSpec API Doc
Generator&lt;/a&gt;. But honestly I prefer edited documentation that can follow
a structure that is thought as documentation rather than merely an automated
output of some code.&lt;/p&gt;

&lt;p&gt;There are various tools to organize edited documentation, like
&lt;a href=&#34;https://readthedocs.org/&#34;&gt;ReadTheDoc&lt;/a&gt; which is in python. Another project appeared last week from
the guys at Pluralsight named &lt;a href=&#34;http://tutorials.pluralsight.com/faq/&#34;&gt;hack.guide()&lt;/a&gt;. That&amp;rsquo;s a community project
but actually being totally open sourced, I was thinking the &lt;a href=&#34;https://github.com/pluralsight/guides-cms&#34;&gt;documentation
building CMS&lt;/a&gt; they made could pretty much fill the gap of a
light-weight RTD, with the benefits of having a UI for editors. Too bad we
don&amp;rsquo;t have anything like this in ruby (or do we?).&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Greenruby 159</title>
      <link>http://blog.mose.com/2016/02/21/greenruby-159</link>
      <pubDate>Sun, 21 Feb 2016 22:10:31 +0800</pubDate>
      
      <guid>http://blog.mose.com/2016/02/21/greenruby-159</guid>
      <description>

&lt;h2 id=&#34;timezones-are-outdated:d102e5698628cd2679575c8fc001deb8&#34;&gt;Timezones are outdated&lt;/h2&gt;

&lt;p&gt;This week I checked out &lt;a href=&#34;https://www.washingtonpost.com/news/worldviews/wp/2016/02/12/the-radical-plan-to-destroy-time-zones-2/&#34;&gt;The radical plan to destroy time
zones&lt;/a&gt;, which proposes to adopt UTC worldwide. It goes even
further in proposing a change in our calendar for adopting the &lt;a href=&#34;https://en.wikipedia.org/wiki/Hanke-Henry_Permanent_Calendar&#34;&gt;Hanke-Henry
Permanent Calendar&lt;/a&gt;. It&amp;rsquo;s not the first time people propose change
in our western gregorian calendar system (which is almost 500 yearsold), but
it&amp;rsquo;s quite not easy to get anything adopted.
Still, we developers consider Timezones as one of our nightmares. When we get
to our senses we put everything we can in UTC, but there is always the need to
get time &amp;lsquo;local&amp;rsquo; at some point. I have honestly little hope that UTC become
the worldwide standard, but, hey, we always can dream, right?&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Greenruby 158</title>
      <link>http://blog.mose.com/2016/02/14/greenruby-158</link>
      <pubDate>Sun, 14 Feb 2016 22:10:31 +0800</pubDate>
      
      <guid>http://blog.mose.com/2016/02/14/greenruby-158</guid>
      <description>

&lt;h2 id=&#34;the-thin-line-between-chaos-and-harmony:430ae6e4341a8c2a323bbff1cdaa06fc&#34;&gt;The thin line between chaos and harmony&lt;/h2&gt;

&lt;p&gt;In the long road of my developer life I had the chance to experience a very
wide variety of organizational models. The most pleasant was in the context of
very large open source projects, where actions are not planned but still
organized, and things fall in their place seemingly naturally. Of course there
is nothing natural in that. There is a category of people, that can be called
catalysts, working as gardeners and building the pathways to collaboration.
But because there is no predefined hierarchy, I thought chaos had some
virtues.&lt;/p&gt;

&lt;p&gt;In other hierarchical models, there is so much waste following the rule rather
than its essence. It&amp;rsquo;s like there was an abstraction layer for efficiency and
the staff follows the abstraction, paying no respect to the efficiency.
Because after a time the set of rules is not making sense anymore. The
environment moves fast and habits are hard to change. It&amp;rsquo;s taking long time
for an organization to change its own internal rules.&lt;/p&gt;

&lt;p&gt;But I also have seen non-hierarchical model totally fail. When you try to
apply an open-source kind of organization inside a company, it cannot be done
half-way, but it cannot be done fully.&lt;/p&gt;

&lt;p&gt;For example the volatility of contributors is an essential part of the
open-source organization model. Things are working the way they do because
people are free to leave and join at will, or stop working when they decide.
This is totally different in a company, even if you can get some
approximation, leaving and joining is a more complicated process, and has a
different set of motivations. And let&amp;rsquo;s not talk about the freedom to stop
working at will.&lt;/p&gt;

&lt;p&gt;This single factor leads the free-formed communities to get various incentives
for contributors to feel good about their interaction in the community. The
ones that don&amp;rsquo;t play well along other people just end up either in a
leadership position because they are geniuses, or just leave because they
don&amp;rsquo;t fit in. Or they stay and kill the project because everybody else leaves.
But most likely they are the reason why forks exist.&lt;/p&gt;

&lt;p&gt;But in a non-hierarchic company, those cowboys may end up hurting the whole
process of collaboration by capturing some processes, getting very good at
them, and give hell to everybody else for a time, under the privilege of the
Power of the Bottleneck. It&amp;rsquo;s very hard to get those people to share knowledge
because their position depends on it. If nothing is done, the situation will
become uneasy and awkward at best.&lt;/p&gt;

&lt;p&gt;Certainly in that type of situation, if there is some power in place to
mitigate this danger, all can be good and well. But from my experience such
power is hard to come by. Especially if the non-hierarchic aspect of the
organization depends on him/her/it. Maybe there is some way to have some kind
of catalyst role, but where I have seen such role in a company, it was
informal and not an official position.&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s too bad because I would love to experience again some real collective
intelligence in the workplace the same way I have experienced it in some open
source communities. I think maybe there are some companies out there that are
doing that well, but most of the time it&amp;rsquo;s not going to be structural. Most
likely it will come from a specific set of people that do real good in
collaboration. I still wait to see a company that includes in its genetic
code, in its fundamental principle, the seeds that make it possible to be
efficient and still instinctive.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Greenruby 156</title>
      <link>http://blog.mose.com/2016/01/31/greenruby-156</link>
      <pubDate>Sun, 31 Jan 2016 22:10:31 +0800</pubDate>
      
      <guid>http://blog.mose.com/2016/01/31/greenruby-156</guid>
      <description>

&lt;h2 id=&#34;3-years-of-green-ruby:183ee6564ab7e32d81baa05c527bf345&#34;&gt;3 years of Green Ruby&lt;/h2&gt;

&lt;p&gt;Well, almost 3 years. &lt;a href=&#34;http://greenruby.org/grn-001.html&#34;&gt;Green Ruby #1&lt;/a&gt; was sent on feb 12th, 2013. Since
then, we sent 156 editions, one per week without discontinuation, including a
total of 5556 links. There is now 1691 subscribers to the newsletter. That&amp;rsquo;s
quite something, for a mail that was just sent to some friends at the
beginning.&lt;/p&gt;

&lt;p&gt;During all this time, things didn&amp;rsquo;t change that much. In july 2013 the code
was put on github and the process didn&amp;rsquo;t change much since then. I got a
Rakefile to build the letter from yaml files and there is no need to change
it. For the first 2 years Xenor was sending me some links by mail every weeks,
then in 2015 Tysliu got back in and we used git to get both of their
contributions. Later on, we got the slack channel where we throw between 10 to
30 links per weeks that I do my selection from. Nauman recently proved to be
the most prolific contributor on slack. (btw if you want to join our slack
group, it&amp;rsquo;s pretty open, just fire me an email).&lt;/p&gt;

&lt;p&gt;We still don&amp;rsquo;t have any business project behind this publication. We are just
a group of friends that like to keep in touch with the current trends, and
that like to share the result of our weekly workout with our fellow coder
brothers and sisters. Soon we will reach the limit of the free mailchimp usage
(at 2000 subscribers), and that will be an interesting time. We will then ask
people to unsubscribe if they don&amp;rsquo;t read the letter. Maybe registration will
be closed if we reach the hard limit. But there is no plan to become a
sustainable money-based adventure. So we&amp;rsquo;ll keep the cost to the minimum.&lt;/p&gt;

&lt;p&gt;If you feel any gratefulness at all, pay it forward. Share your knowledge
around you. Publish more open source code. Hug a friend or a stranger. Be nice
and tolerant. Send some thank-you email to someone that published some open
source code that saved your day. Love is wealth.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Greenruby 155</title>
      <link>http://blog.mose.com/2016/01/24/greenruby-155</link>
      <pubDate>Sun, 24 Jan 2016 22:10:31 +0800</pubDate>
      
      <guid>http://blog.mose.com/2016/01/24/greenruby-155</guid>
      <description>

&lt;h2 id=&#34;the-future-of-under-engineering:fcbdcc9c124e7d704858d627998434f7&#34;&gt;The future of under-engineering&lt;/h2&gt;

&lt;p&gt;Recently Marcelo told me, that&amp;rsquo;s weird, how we do 10% research and
specification, 40% implementation and 50% debugging in this industry. I&amp;rsquo;m more
used to 70% research and specification, 20% implementation and 10% debugging.
He was working in the hardhware industry for a while, and just came to a
service-based company. This is actually a very interesting remark and it
reminded me when I was in my twenties when I was working as a construction
worker.&lt;/p&gt;

&lt;p&gt;When I was young there was no internet and I had a 10 years break from
computers. I had to take stupid jobs like working on construction sites for
low wages. After that I went to art school and later on I worked on building
sets for business shows. I have been shocked by the gap between those 2
worlds. When building a house, there is so much time spent writing plans,
thinking things in advance. While in the show-business construction pattern,
it was mostly about improvisation and managing inflexible time constraints,
with one-time-use construction.&lt;/p&gt;

&lt;p&gt;I feel there is the same gap in the software industry. Well it&amp;rsquo;s not exactly
the same for sure, but the paradigm feels alike. In service software
production, SaaS or ISP businesses, we tend to under-engineer the production.
There are perfectly legitimate reasons for that, the life-cycle of a platform
of service is quick, volatile and the value is not in the software asset but
in the customer-user experience.&lt;/p&gt;

&lt;p&gt;The Agile organization model reinforces this pattern, by providing a
substitute to the early specifications, in the form of user experiences
description. All this is fine and good. For a time. But with years passing we
can see so many occurrences of &amp;lsquo;temporary&amp;rsquo; projects becoming indestructible
legacy monsters. It&amp;rsquo;s like there was some kind of tipping point where the
development should shift from under-engineered to well-engineered but it&amp;rsquo;s
rarely anticipated properly enough.&lt;/p&gt;

&lt;p&gt;But it&amp;rsquo;s pretty hard to address that kind of problem. Throwing away the early
instances is very costly, especially when the organization is shaped by a
fast-paced reactive production model. Introducing proper engineering at early
stages is also not a clever option, as the product has to adapt to the
service, which depends on a constant feedback loop with the users.&lt;/p&gt;

&lt;p&gt;I have the feeling that there is something missing. Like an evolution of agile
that could include seeds of later engineering. Some way to make possible to
start fast, and evolve in a solid and slower model later on without crisis or
disruption. This is the perspective that I think was missing in &lt;a href=&#34;http://www.businessinsider.com/why-computer-programmers-need-to-stop-calling-themselves-engineers-already-2015-11&#34;&gt;that
article&lt;/a&gt; I cited on green ruby 145. But I don&amp;rsquo;t know the answer to
that problem. I suspect it will emerge by itself in the few next years.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Greenruby 153</title>
      <link>http://blog.mose.com/2016/01/10/greenruby-153</link>
      <pubDate>Sun, 10 Jan 2016 22:10:31 +0800</pubDate>
      
      <guid>http://blog.mose.com/2016/01/10/greenruby-153</guid>
      <description>

&lt;h2 id=&#34;that-micro-service-thing:46752485ca0dcc4b52fef655c3c60574&#34;&gt;That micro-service thing&lt;/h2&gt;

&lt;p&gt;For a while now, and more even since the rise of docker, it becomes a trend to
split applications in parts and approach them as a collection of
micro-services. This is not exactly new, I remember in 2002 having seen
various applications based on this concept. But they had shortcomings.
Development was harder and it imported a whole bunch of increased complexity
because there was a lot of moving parts.&lt;/p&gt;

&lt;p&gt;In a project that I have the occasion of following, I can watch the migration
from monolith to micro-service and I can tell you, the architecture change is
not simple technical decision. By splitting application there is a whole lot
of application aspects that move out of the area of the developers team and
are now the responsibility of the infrastructure team. The shift cannot be
taken lightly.&lt;/p&gt;

&lt;p&gt;From what I observed, the switch to micro-services can only be efficient if
there was already a shift to a real devops organization. It means that the
development and the infrastructure are more tightly coupled. Otherwise, it&amp;rsquo;s
just a mess. The QA also can get crazy, and the networking layer gets
increased complexity (or even dramatic latencies). Errors and services
resilience also need an extra layer of attention.&lt;/p&gt;

&lt;p&gt;Don&amp;rsquo;t move to micro-services if you are not ready for it, seriously, it can
end up by shooting yourself in the foot.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Greenruby 152</title>
      <link>http://blog.mose.com/2016/01/03/greenruby-152</link>
      <pubDate>Sun, 03 Jan 2016 22:10:31 +0800</pubDate>
      
      <guid>http://blog.mose.com/2016/01/03/greenruby-152</guid>
      <description>

&lt;h2 id=&#34;here-is-2016:af177e0d6352be87fe53a31db08b69a8&#34;&gt;Here is 2016&lt;/h2&gt;

&lt;p&gt;Well in this last week of 2015, the have not been that much publication and
the list of links is shorter than usual. Everybody is probably just having a
life for a change, which is a good things :)&lt;/p&gt;

&lt;p&gt;There is a lot of promising trends that may unleash in the coming year. I hope
to see what ruby 3 will bring. Rails 5 is already almost out there too. But
there is some interesting move on the side of Elixir as well, even if it&amp;rsquo;s
still very young and hacky in my opinion.&lt;/p&gt;

&lt;p&gt;On the frontend side, there is that big news that was announced last year,
with &lt;a href=&#34;https://www.microsoft.com/en-us/WindowsForBusiness/End-of-IE-support&#34;&gt;Microsoft ditching IE old versions&lt;/a&gt; officially on january 12,
it will be on tuesday next week. IE 11 would become the only supported
version. A bold but welcome move. Maybe it will help adoption of JS recent
native APIs. I suspect that if IE dies, jquery will not make any sense anymore
as the JS stack will be more consistent then. But maybe I&amp;rsquo;m wrong, that&amp;rsquo;s just
an intuition. And the end of support doesn&amp;rsquo;t mean there will be an instant
extinction of old IEs, it may still take some more time.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Greenruby 151</title>
      <link>http://blog.mose.com/2015/12/27/greenruby-151</link>
      <pubDate>Sun, 27 Dec 2015 22:10:31 +0800</pubDate>
      
      <guid>http://blog.mose.com/2015/12/27/greenruby-151</guid>
      <description>

&lt;h2 id=&#34;happy-end-of-2015:602bde3b83227cc35adf0ad4ea322068&#34;&gt;Happy end of 2015&lt;/h2&gt;

&lt;p&gt;Take good time, use the calendar rotation as a pretext to have good
resolutions, get wasted like if you were a teenager (wait, what? we all are
teenagers here?), or do whatever makes you happy if like me you prefer to
remain sober. See you in 2016.&lt;/p&gt;

&lt;h2 id=&#34;slackcast-2016:602bde3b83227cc35adf0ad4ea322068&#34;&gt;SlackCast 2016&lt;/h2&gt;

&lt;p&gt;We had a lot of discussion with Nauman Tariq about how to make slack usage
more lively, more useful, and such things. We worked together on a concept of
event that we want to try next weekend. It will happen next Saturday (Jan 2nd)
around 23:00 UTC (more or less 4 hours). If you want to participate, please
shoot me an &lt;a href=&#34;mailto:mose@greenruby.org&#34;&gt;email&lt;/a&gt;, and we&amp;rsquo;ll give you the precise time when we know
it, plus the how-to-join-in. It will be a first time, it won&amp;rsquo;t be perfect, but
it will be a lot of fun.&lt;/p&gt;

&lt;p&gt;Read more about it on the &lt;a href=&#34;https://slack-files.com/T05052K3Q-F0FSX2GHG-3330dc8ef1&#34;&gt;SlackCast manifesto&lt;/a&gt;. You also can join
&lt;a href=&#34;http://www.rubyonrails.link/&#34;&gt;rubyonrails.link&lt;/a&gt;, that&amp;rsquo;s where it will happen.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Greenruby 150</title>
      <link>http://blog.mose.com/2015/12/20/greenruby-150</link>
      <pubDate>Sun, 20 Dec 2015 22:10:31 +0800</pubDate>
      
      <guid>http://blog.mose.com/2015/12/20/greenruby-150</guid>
      <description>

&lt;h2 id=&#34;150-weeks:4ed16e5b224ff8e7f398b527b88e0d35&#34;&gt;150 weeks&lt;/h2&gt;

&lt;p&gt;It&amp;rsquo;s kind of a round number, this 150th edition of the Green Ruby Newsletter
is an occasion to see where we are. At this day there are 1,610 subscribers to
the email newsletter. The website has around 250 unique visits per day, which
mostly are RSS readers. Those are anecdotal numbers. As we have no intention
to monetize this initiative, it doesn&amp;rsquo;t matter that much. Soon we will enter
in the red zone in the amount of subscribers and we will need to push some
people out, those who forgot about the newsletter but also forgot to
unsubscribe. It will happen when we reach 1,800 (because Mailchimp is still
free under 2,000 subscribers).&lt;/p&gt;

&lt;p&gt;During the whole life of the publication, we never missed one week. Last week,
thanks to Xenor, I even could have some rest. Now I&amp;rsquo;m better, flu never last.
We also have, for a couple of months, much more links contributions (thanks
Nauman Tariq). All in all, our model seems to have been pretty sustainable.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Greenruby 148</title>
      <link>http://blog.mose.com/2015/12/06/greenruby-148</link>
      <pubDate>Sun, 06 Dec 2015 22:10:31 +0800</pubDate>
      
      <guid>http://blog.mose.com/2015/12/06/greenruby-148</guid>
      <description>

&lt;h2 id=&#34;busy-hackathon-in-taipei:b4b86de420849d53ccbec354ab20a437&#34;&gt;Busy hackathon in Taipei&lt;/h2&gt;

&lt;p&gt;This weekend we had our first &lt;a href=&#34;http://hackathon.taipei/en.html&#34;&gt;hackathon&lt;/a&gt; in Taipei, organized by
&lt;a href=&#34;http://gandi.net&#34;&gt;Gandi&lt;/a&gt;. That was pretty fun, to be there on the side of the organizers
without actually being in charge of the organization for once. Such geek
events are always so great for meeting and sharing, being forbidden to
participate didn&amp;rsquo;t prevent me to push some ideas around.&lt;/p&gt;

&lt;p&gt;During the course of the weekend, I joined mickey to push the creation of a
&lt;a href=&#34;https://github.com/elixirtw/elixir_tw&#34;&gt;Taiwan group for Elixir&lt;/a&gt;, for which we had an idea of a stream
capture feature to gather slack discussion and index them. I also had an idea
of event for &lt;a href=&#34;https://github.com/FreeBSDTaiwan/portscamp&#34;&gt;FreeBSD portscamp&lt;/a&gt; with marcelo, so we made a FreeBSD
Taiwan group on github as well (with a pretty neat logo). All this was
actually not that much related to the hackathon but just emerging from natural
proximity with other geeks.&lt;/p&gt;

&lt;p&gt;Check my &lt;a href=&#34;https://www.flickr.com/photos/43946968@N07/albums/72157661448405060&#34;&gt;photos on flickr&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Greenruby 147</title>
      <link>http://blog.mose.com/2015/11/29/greenruby-147</link>
      <pubDate>Sun, 29 Nov 2015 22:10:31 +0800</pubDate>
      
      <guid>http://blog.mose.com/2015/11/29/greenruby-147</guid>
      <description>

&lt;h2 id=&#34;code-in-the-dark:f6454540d52b5466477bc9e3371f78a1&#34;&gt;Code in the dark&lt;/h2&gt;

&lt;p&gt;My attention was brought this week to &lt;a href=&#34;http://codeinthedark.com/&#34;&gt;Code in the dark events&lt;/a&gt;. It seems
pretty cool. A 15 minutes race in html and css with no preview. But the thing
that brought my attention to that format is the special editor used for those
events with a special effect on the cursor. It seems to add a really dramatic
effect on the competition. We need more ideas like that for pure geek fun.&lt;/p&gt;

&lt;h2 id=&#34;first-look-at-perl-6:f6454540d52b5466477bc9e3371f78a1&#34;&gt;First look at perl 6&lt;/h2&gt;

&lt;p&gt;For many people, Perl sounds like trauma. Because it didn&amp;rsquo;t move for a while,
when I hear something is perl code, it sounds like it&amp;rsquo;s legacy code, old and
dusty. Well, Perl 6 is going to come out for christmas and the situation may
change. Perl 6 is in the lab for &lt;a href=&#34;http://www.perlfoundation.org/perl6/index.cgi?when_will_perl_6_be_released&#34;&gt;15 years&lt;/a&gt; now, it&amp;rsquo;s more than
time to get it shipped.&lt;/p&gt;

&lt;p&gt;At &lt;a href=&#34;http://doc.perl6.org/language/5to6-nutshell&#34;&gt;first glance&lt;/a&gt;, they seem to have tried to &amp;lsquo;modernize&amp;rsquo; the language,
make it more idiomatic. It even seems it looks more like ruby, with the
replacement of arrow by dots, the optional parenthesis, better exception
handling. Well, overall, it feels cleaner. But it also seem to have some
potential to mix functional and object-oriented in an interesting way.&lt;/p&gt;

&lt;p&gt;So, maybe there is going to be a second life for the old perl. It&amp;rsquo;s a breaking
version, old perl code will certainly break on the new version. So it&amp;rsquo;s almost
like a new language. For sure I will still keep ruby as my preferred language,
but I like multilingualism, so maybe I will give it a try .. again (last perl
app I wrote was 12 years ago).&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Greenruby 146</title>
      <link>http://blog.mose.com/2015/11/22/greenruby-146</link>
      <pubDate>Sun, 22 Nov 2015 22:10:31 +0800</pubDate>
      
      <guid>http://blog.mose.com/2015/11/22/greenruby-146</guid>
      <description>

&lt;h2 id=&#34;a-hackhaton-in-taipei:118c2d49c9d42e8c5462859981122936&#34;&gt;A Hackhaton in Taipei&lt;/h2&gt;

&lt;p&gt;In 2 weeks Gandi organizes with .taipei registry a &lt;a href=&#34;http://hackathon.taipei/&#34;&gt;Hackhaton&lt;/a&gt; with
pretty wide topic. It will be at at the Hi-tech Promotion Center in Taipei on
December 5 and 6. I will be there (part of the jury), so if you want to have
some week-end fun and are in Taipei at that time, feel free to join in. There
will be prizes, free domains and hosting. I would love to see some ruby
projects there.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Greenruby 145</title>
      <link>http://blog.mose.com/2015/11/15/greenruby-145</link>
      <pubDate>Sun, 15 Nov 2015 22:10:31 +0800</pubDate>
      
      <guid>http://blog.mose.com/2015/11/15/greenruby-145</guid>
      <description>

&lt;h2 id=&#34;more-about-bullies:7d0bd163d3b6e38d12756fdafb7e56e1&#34;&gt;More about bullies&lt;/h2&gt;

&lt;p&gt;This week I read the &lt;a href=&#34;http://devblog.avdi.org/2015/11/09/software-bullying/&#34;&gt;reaction of Avdi&lt;/a&gt; to the rant of Linus last
week. He proposes a short but insightful angle by just naming it &amp;lsquo;bullying&amp;rsquo;.
It rejoins the damage that I consider the coder-hero culture brings to our
industry.&lt;/p&gt;

&lt;p&gt;Certainly the creative process of writing software attract creative people.
They have strong personalities, some have tendencies to mild autism. They move
mountains and their pride make them work day and night to achieve unbelievable
things.&lt;/p&gt;

&lt;p&gt;This is good and well, but on the long run, now that we are passing 2
generations of coders, we know that it&amp;rsquo;s not sustainable on the long run.
Plus, it has a disastrous impact on team building. No pyramid was built by a
single hero.&lt;/p&gt;

&lt;p&gt;Incidentally I also read an interesting article about &lt;a href=&#34;http://www.businessinsider.com/why-computer-programmers-need-to-stop-calling-themselves-engineers-already-2015-11&#34;&gt;Why computer
programmers need to stop calling themselves engineers already&lt;/a&gt;.
Even if I can&amp;rsquo;t clearly explain how this is related, I have the feeling it&amp;rsquo;s
talking about something that is in the same area.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>