<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Moselog</title>
    <link>http://blog.mose.com/</link>
    <description>Recent content on Moselog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 30 Jul 2016 22:10:31 +0800</lastBuildDate>
    <atom:link href="http://blog.mose.com/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Greenruby 182</title>
      <link>http://blog.mose.com/2016/07/30/greenruby-182</link>
      <pubDate>Sat, 30 Jul 2016 22:10:31 +0800</pubDate>
      
      <guid>http://blog.mose.com/2016/07/30/greenruby-182</guid>
      <description>

&lt;h2 id=&#34;chatops-and-machine-learning:e9b36217e79099e03b1370ffadd11329&#34;&gt;Chatops and machine learning&lt;/h2&gt;

&lt;p&gt;Since I slowly becomes the chatops specialist where I work, I get to think I
want more. Since the beginning we have been interacting with programs
essentially with graphical interfaces. First asynchronous if we think about
the web, now more and more synchronous, but they are interfaces that are not
human. They are designed for giving control to the operators of those
interfaces.&lt;/p&gt;

&lt;p&gt;But the more we advance in autonomy of our programs, the more we should trust
them to sort the information by priorities. The interfaces like Siri, Echo,
are much more &amp;lsquo;human&amp;rsquo; and conversational. It doesn&amp;rsquo;t take a genius to
speculate that interfaces are going to die one day, except for very
specialized usages, and more interaction will be just more conversational.&lt;/p&gt;

&lt;p&gt;In the course of my development of interactive agents for technical needs, I
noticed that adding just a little bit of intelligence and memory in those
agents goes a long way in usability. Especially in chatops, a lot of the
actions required from those agents are predicable and repetitive. The
development of new features should follow the recognition of those patterns
and shorten the path to accomplish some actions. That&amp;rsquo;s pretty much my job.&lt;/p&gt;

&lt;p&gt;But coding this continually is not very cost effective. Tools also change,
then patterns evolve. Now all I can think about is a way to design an irc bot
that learns by itself. Some program that does real meta-programming and
considers its commands as data rather than hard-coded pre-conceived path for
the information to flow.&lt;/p&gt;

&lt;p&gt;If you know some tools that already do that, can you fire me a mail?&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Greenruby 181</title>
      <link>http://blog.mose.com/2016/07/24/greenruby-181</link>
      <pubDate>Sun, 24 Jul 2016 22:10:31 +0800</pubDate>
      
      <guid>http://blog.mose.com/2016/07/24/greenruby-181</guid>
      <description>

&lt;h2 id=&#34;innovation-and-consensus:d227510bfc1c353e16b44869362b5410&#34;&gt;Innovation and Consensus&lt;/h2&gt;

&lt;p&gt;Last week I got to check out 2 javascript frontend frameworks, &lt;a href=&#34;https://github.com/yoshuawuyts/choo&#34;&gt;Choo&lt;/a&gt;
(the cute framwework) and &lt;a href=&#34;http://cycle.js.org/&#34;&gt;Cycle.js&lt;/a&gt; (the streams power). It feels
that nowadays React is eating the frontend world, but there is actually a lot
of non-marginal alternatives. It made me think that there is something tricky
with the process of innovation. It is born from disagreement. It feeds with
discontent.&lt;/p&gt;

&lt;p&gt;Those frameworks are born from the refusal to consider React as a consensus,
hence it generates an alternative path, exploring different paradigms. In my
opinion, and from an global point of view, it&amp;rsquo;s a sign of vivacity of an
ecosystem. Diversity of species guarantees a larger span of choice for the
natural selection and a faster evolution.&lt;/p&gt;

&lt;p&gt;But consensus and normative approaches have so many virtues. Damn, this is
tricky. Well, here is the catch. Unicity in the software ecosystem creates
stability, which in turn creates comfort for the actors involved in the
industry. Habits get stronger, mobility is easier, interoperability leads to
bigger systems with long life-cycles. This is good.&lt;/p&gt;

&lt;p&gt;On another hand diversity creates instability, challenges the developers and
makes it harder to find common grounds. It favors exploration and smaller
systems with shorter life-cycles. In a diverse ecosystem, paradigms and new
ideas are born and die quickly. And I think it&amp;rsquo;s a much more rich ecosystem.&lt;/p&gt;

&lt;p&gt;For some reason this duality reminds me of the cathedral and the bazaar. It&amp;rsquo;s
totally unrelated, actually, but maybe there is some kind of interesting
parallel in this metaphor collision. But beyond that, there is a real
antagonism for developers, and an opposing interest between the development
workforce and the software as a living species.&lt;/p&gt;

&lt;p&gt;And I have the feeling that on the long run, diversity and innovation win. So
you better get used to the discomfort it brings. Train yourself to jump from
one framework to another. Don&amp;rsquo;t let yourself getting lazy by going to the
comfortable consensus systematically. This ability to cope with change is your
best hope for staying current. Because the change if the way of the evolution.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Greenruby 180</title>
      <link>http://blog.mose.com/2016/07/17/greenruby-180</link>
      <pubDate>Sun, 17 Jul 2016 22:10:31 +0800</pubDate>
      
      <guid>http://blog.mose.com/2016/07/17/greenruby-180</guid>
      <description>

&lt;h2 id=&#34;nothing-to-report:f2fa0298a390985dccd06fc813609573&#34;&gt;nothing to report&lt;/h2&gt;

&lt;p&gt;Yeah there are weeks like that, I don&amp;rsquo;t have inspiration. Or I&amp;rsquo;m lazy. Or I&amp;rsquo;m
too busy writing &lt;a href=&#34;https://github.com/Gandi/hubot-phabs/commits&#34;&gt;javascript tests&lt;/a&gt; with mocha, chai and or sinon.
Already having 3 times more lines of code in tests that in code and even if
coverage says 80% I know for a fact that there are many more cases I need to
test. Anyways, there is too much fun for me to just go beyond the traditional
gathering of the links for this week. Can&amp;rsquo;t write a rant. No way.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Greenruby 179</title>
      <link>http://blog.mose.com/2016/07/10/greenruby-179</link>
      <pubDate>Sun, 10 Jul 2016 22:10:31 +0800</pubDate>
      
      <guid>http://blog.mose.com/2016/07/10/greenruby-179</guid>
      <description>

&lt;h2 id=&#34;the-in-culture-of-encryption:51c044384329e8bd96399bebc071607b&#34;&gt;The (in)culture of encryption&lt;/h2&gt;

&lt;p&gt;A couple weeks ago I had found out that a friend was keeping his passwords in
a google sheets document. I was horrified. But he&amp;rsquo;s a normal person. I mean,
not more technical than the next guy, or just a little. He&amp;rsquo;s using the web
interface of gmail for his mail, like many people do (I even know very
technical people doing it, which is still boggling me). I looked around and
found &lt;a href=&#34;https://www.mailvelope.com/&#34;&gt;mailvelope&lt;/a&gt;. So I hook him up on it and now he can use GPG.&lt;/p&gt;

&lt;p&gt;In the past 20 years I have seen the timid evolution of personal encryption.
Oh there are initiatives like &lt;a href=&#34;https://keybase.io/&#34;&gt;Keybase&lt;/a&gt;, various simple tools like
&lt;a href=&#34;https://www.passwordstore.org/&#34;&gt;passowrdstore&lt;/a&gt; or &lt;a href=&#34;https://github.com/henryboldi/felony&#34;&gt;Felony&lt;/a&gt; that I discovered this week. But it
seems that encryption don&amp;rsquo;t really stick to the usages, unless you have a
specific thought about it. Fortunately there is some wise generalization of
SSL for inter-server communication, with initiatives like &lt;a href=&#34;https://letsencrypt.org/&#34;&gt;lets
encrypt&lt;/a&gt;. But inter-personal communication is still wide open.&lt;/p&gt;

&lt;p&gt;More and more it is well-known that our data is food for various corporation,
governmental agencies, and dark organizations. What will it take for getting
the users to claim better privacy? Will it ever happen?&lt;/p&gt;

&lt;p&gt;I mean, yes for sure people can use the tools. But it&amp;rsquo;s cumbersome. Until
encryption is embedded in our tools and services, it simply won&amp;rsquo;t spread
significantly enough. There are some projects like &lt;a href=&#34;https://caliopen.org/&#34;&gt;Caliopen&lt;/a&gt; that
try to do so. On another hand, we have seen some services like
&lt;a href=&#34;https://telegram.org/&#34;&gt;Telegram&lt;/a&gt; which provide such service, and even some mainstream
providers like &lt;a href=&#34;http://www.wired.com/2016/04/forget-apple-vs-fbi-whatsapp-just-switched-encryption-billion-people/&#34;&gt;Whatsapp&lt;/a&gt; jump into the full-encryption train. So
maybe there is hope? I still wonder what&amp;rsquo;s the part played by Facebook (which
now owns Whatsapp) in that move.&lt;/p&gt;

&lt;p&gt;The recent fight between Apple and US government was supposed to set some kind
of precedent. Too bad it was aborted. But they would have complied at the end,
this is my bet. Now that encryption is the only way for companies to legally
keep their users safe from legal (and illegal) inquiries, maybe more will
consider it?&lt;/p&gt;

&lt;p&gt;If you have two onces of technical savyness, please stop running naked on the
streets. Gear up and use encryption whenever possible.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Greenruby 178</title>
      <link>http://blog.mose.com/2016/07/03/greenruby-178</link>
      <pubDate>Sun, 03 Jul 2016 22:10:31 +0800</pubDate>
      
      <guid>http://blog.mose.com/2016/07/03/greenruby-178</guid>
      <description>

&lt;h2 id=&#34;open-code-a-chance-for-improvement:9c5419396d421f66fa0cc8a4eac9d46e&#34;&gt;Open code, a chance for improvement&lt;/h2&gt;

&lt;p&gt;Since I&amp;rsquo;m writing code I try to publish as much as I can as open source
components. But I had occasion to work in situations where it was not
possible. And I noticed some serious differences in the result.&lt;/p&gt;

&lt;p&gt;When you publish some code on, say, Github, you can just throw it as is and be
done with it. Then you merely use github as a repository provider and don&amp;rsquo;t
care much about anything else. But when you begin to spend some time doing it,
you notice that external contributor can bring great fixes, help detect bugs,
and generally speaking make your code more valuable in itself.&lt;/p&gt;

&lt;p&gt;But this is a two-ways road. To invite people to collaborate you need to
address a certain amount of little details. Writing a decently clear README is
a demonstration of politeness for any passing guest. It&amp;rsquo;s just more inviting.
Making sure you have a complete enough test suite guarantees you can be sure
external contributions won&amp;rsquo;t mess up existing code (if writing tests in itself
was not motivating enough). Refactoring your code by following
&lt;a href=&#34;https://codeclimate.com/&#34;&gt;codeclimate&lt;/a&gt; advises will break huge methods in small pieces,
making things easier to be improved. Enforcing some kind of &lt;a href=&#34;https://github.com/bbatsov/rubocop&#34;&gt;style guide&lt;/a&gt;
will avoid people to get confused by a non-standard code-art.
(that person could be you in one year).&lt;/p&gt;

&lt;p&gt;All those aspects, when you work at a company as the only coder on one piece
of code, you don&amp;rsquo;t have that much incentive to enforce them. And I know about
it because I have seen a huge lot of legacy code that was written that way.
With lame tests that only purpose was to enforce code coverage without really
testing much, weird code style, epic methods, no instructions. If it&amp;rsquo;s just
you and a couple of friends that you see every day, it&amp;rsquo;s fine, you can deal
with it. For a time.&lt;/p&gt;

&lt;p&gt;The fact is that exposing your code brings an incentive to work on the
(apparently) non-essential aspects of your code. But those aspects really
bring a huge improvement on the long term. Which leads me to consider that
opening source code is a way that can lead to make it better.&lt;/p&gt;

&lt;p&gt;An usually, I noticed that the bosses don&amp;rsquo;t care if it&amp;rsquo;s open or not, as far
as there is no trade secrets revealed. But well we write so much code that if
business-neutral for many things. At the end of the day, it&amp;rsquo;s only the matter
of asking the boss if you can free this or that code, and then it&amp;rsquo;s on its
way. Even more if the code is published under an organization on github, there
is even more incentive to make it clean, and it will also help possible
candidates to understand what kind of stack you are dealing with, and what
kind of principle you try to enforce. Even if it&amp;rsquo;s actually only enforced in
your open source code and the hidden code is messy. Haha.&lt;/p&gt;

&lt;p&gt;So, I ask you now, what in your current codebase could you extract as an open
source gem? or node package?&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Greenruby 177</title>
      <link>http://blog.mose.com/2016/06/26/greenruby-177</link>
      <pubDate>Sun, 26 Jun 2016 22:10:31 +0800</pubDate>
      
      <guid>http://blog.mose.com/2016/06/26/greenruby-177</guid>
      <description>

&lt;h2 id=&#34;remote-working:150acb3fbf488af89de91dbfbd571391&#34;&gt;Remote working&lt;/h2&gt;

&lt;p&gt;For some random strange reason I had a lot of links this week about remote
working websites. I know it&amp;rsquo;s a very real topic for our craft. But I still see
a lot of companies that have hard time coping with the concept.&lt;/p&gt;

&lt;p&gt;On one hand, there is a shortage of technically skilled staff. The growth of
the tech industry and especially the online services is way too fast for the
education system to catch up. It&amp;rsquo;s been like that for pretty much 20 years
now. And there is an unbalanced repartition between where the growing
companies are and where the growing population of techies are. So it would
only make sense that either relocation would be much easier or remote working
much more widespread, no? Well, no. Relocation is bound to laws that are not
driven by the only technical area. And remoting is dependent on a cultural and
also legal shift.&lt;/p&gt;

&lt;p&gt;Because working with remote staff, many of us know what it means. First it
involves a level of trust in the staff that is unprecedented. The same level
of trust you need to invest when working with a contractor, actually. Then the
old-fashioned control and command system in place with traditional management
systems gets totally inefficient.&lt;/p&gt;

&lt;p&gt;More even, to be efficient with a remote team means adopting a work
organization and tools that are specifically thought for this setup. From what
I can experience, it&amp;rsquo;s either one or the other. When half the staff works in
an office locally it&amp;rsquo;s not easy (yet not impossible) to be efficient with
another half remote.&lt;/p&gt;

&lt;p&gt;Some stuff will be likely to happen locally with old ways of oral
communication and meetings with sparse note-taking. That will put the remote
staff in the dark of some parts of the internal process. It may create a
double-speed kind of organization, there is the ones that are full speed and
the ones that are just, well, not in the core. Oh it&amp;rsquo;s still possible to make
it work. It&amp;rsquo;s just harder.&lt;/p&gt;

&lt;p&gt;Or maybe it&amp;rsquo;s like the web and the mobile. Slowly companies need to become
remote-first and then eventually also work on local office-based scale. But
there are still various barriers for having a real remote-friendly world
anyways. The legal status is not clear,m for example, money transfers between
countries, compliances with social coverage conventions, no international law
seems to cover international employment with individuals.&lt;/p&gt;

&lt;p&gt;From what I can understand, remote working from a distant country is still a
hack, legally speaking. Companies need to find tricks. Luckily, hacking is
something we are not bad at. But still. I wonder when it&amp;rsquo;s going to change,
and see a legal ground for a really normal remote working context.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Greenruby 176</title>
      <link>http://blog.mose.com/2016/06/19/greenruby-176</link>
      <pubDate>Sun, 19 Jun 2016 22:10:31 +0800</pubDate>
      
      <guid>http://blog.mose.com/2016/06/19/greenruby-176</guid>
      <description>

&lt;h2 id=&#34;the-virtues-of-duplication:3480f0a86761ef50d1ed36f6b3b46e94&#34;&gt;The virtues of duplication&lt;/h2&gt;

&lt;p&gt;Few weeks ago I began to prepare a copy of the Green Ruby Template system for
the usage of the Remote Meetup team. It&amp;rsquo;s kind of ironic because, from some
point of view, this code is a sin and was not written in the perspective to be
generic. It&amp;rsquo;s deliberately not constrained to code best practices, it&amp;rsquo;s
joyfully messy and blatantly suboptimal. It was a quick and dirty scripting
solution, it could have been a set of shell scripts, well it happens to be
using ruby. &lt;a href=&#34;https://github.com/greenruby/grn-static/blob/master/lib/builder.rb&#34;&gt;Check it out&lt;/a&gt; if you don&amp;rsquo;t believe me.&lt;/p&gt;

&lt;p&gt;But it&amp;rsquo;s doing the job for years now. It&amp;rsquo;s a builder code, so it&amp;rsquo;s run as a
convenience only a few times a week, it doesn&amp;rsquo;t really need to be fast. It
just needs to do the job. Trust me I like good code, with clean design and
full test coverage. But this one was just an intimate assistant of mine which
was not really a software. Just some automation scripts.&lt;/p&gt;

&lt;p&gt;And now here it is, I get to face a situation where some friends need the same
setup and I can&amp;rsquo;t just give them the code, it&amp;rsquo;s so custom. But there have been
only a few changes to make and it was ready. But the interesting part is in
the process. While duplicating the code for the Remote Meetup newsletter,
well, I extracted some stuff, made a config file to remove various hardcoded
things.&lt;/p&gt;

&lt;p&gt;Well it is still a big ball of dirty code, but in the duplication, it got more
generic. I love that feeling which brings the software development world
closer from the biological world. There is some kind of evolutionary process
going on in the life of a software. It takes many forms and I like it when I
get reminded of those similarities. I could go on and on about the topics that
an open source ecosystem is necessary for the diversity of code to flourish
and make evolution possible in a totally Darwinian way.&lt;/p&gt;

&lt;p&gt;So this simple operation was just illustrating one principle: when you share
your code you shape it and make it more generic in the process. It can have
various beneficial side effects beyond the single act of duplication and
adaptation. I find it&amp;rsquo;s also true when you publish your code as an open source
project. If it gets some traction and people start to use it, they will import
their context in your initial ecosystem and bring the same kind of
adjustments. Making it stronger, in some way.&lt;/p&gt;

&lt;p&gt;Anyways, the &lt;a href=&#34;http://remotemeetup.com/news/index.html&#34;&gt;Remote Meetup News&lt;/a&gt; website and newsletter generator is now
ready, and you may find that the design is kind of familiar. Well, the rule of
the path of least resistance also apply here for sure. I begin to apply back
on Green Ruby the changes I made over there. I suspect the third duplication,
of any, will be the extraction of the common parts in a separate codebase,
like a gem with a lib.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Greenruby 175</title>
      <link>http://blog.mose.com/2016/06/12/greenruby-175</link>
      <pubDate>Sun, 12 Jun 2016 22:10:31 +0800</pubDate>
      
      <guid>http://blog.mose.com/2016/06/12/greenruby-175</guid>
      <description>

&lt;h2 id=&#34;playing-with-crystal:c37f98fa8266cedd948db823460fa08c&#34;&gt;Playing with crystal&lt;/h2&gt;

&lt;p&gt;Last week I went to a &lt;a href=&#34;http://remotemeetup.com&#34;&gt;remote meetup&lt;/a&gt; of &lt;a href=&#34;https://www.rubyparis.org/&#34;&gt;Paris.rb&lt;/a&gt; (fr). Well, it
was at 1am in my timezone, but I wanted to check how remote meetups can go and
there was some presentation about crystal and about kemal. It was a great
moment (&lt;a href=&#34;https://www.bigmarker.com/remote-meetup/ParisRb-June-7?show_live_page=true&#34;&gt;video is online&lt;/a&gt; if you can understand french), and gave me the
push to give crystal a try. It was low on my todo list but it was there,
waiting for the proper conditions.&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s pretty much the main thing that I got out of it. Attending to social
activities is providing once again a great push to move forward. It&amp;rsquo;s not
about what you learn (which still can be valuable), it&amp;rsquo;s not about networking
with people (even if it can be priceless), it&amp;rsquo;s all about the personal alchemy
that brings you on your edge and keeps you hungry for more. Well, that&amp;rsquo;s how
it works for me, at least.&lt;/p&gt;

&lt;p&gt;So I had a look at &lt;a href=&#34;http://crystal-lang.org/&#34;&gt;Crystal&lt;/a&gt;, and &lt;a href=&#34;https://github.com/mose/anyquestion&#34;&gt;played&lt;/a&gt; a bit with &lt;a href=&#34;http://kemalcr.com/&#34;&gt;Kemal&lt;/a&gt;, and
I&amp;rsquo;m very happy with the result. I had some attempt to check Elixir too but
crystal felt really much closer to ruby. The main difference being the
variable typing, the stdlib that includes some modern stuff like websockets or
oauth2, and the compile step (which in some case can be a bit taxing). But the
speed gain is phenomenal. I suspect it would make some sense, in a scalability
strategy, to think about porting ruby code to crystal when perfs become an
issue (not sure how it would apply to complex rails app though).&lt;/p&gt;

&lt;p&gt;Okay yeah Crystal is still very young. But it&amp;rsquo;s getting traction, I bet it has
a bright future ahead.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Greenruby 174</title>
      <link>http://blog.mose.com/2016/06/05/greenruby-174</link>
      <pubDate>Sun, 05 Jun 2016 22:10:31 +0800</pubDate>
      
      <guid>http://blog.mose.com/2016/06/05/greenruby-174</guid>
      <description>

&lt;h2 id=&#34;scarcity-and-abundance:18c51e5740969f01b50a58d17ac773ca&#34;&gt;Scarcity and abundance&lt;/h2&gt;

&lt;p&gt;As you may remember, this newsletter is using the generous free plan from
Mailchimp. But it has limits. Only 2000 emails ca subscribe to that
newsletter. It&amp;rsquo;s already a great gift, and I&amp;rsquo;m pretty sure it&amp;rsquo;s a good
business calculation for them. Now GreenRuby reaches 1915 subscriptions. Which
means we need to address that so pervasive concept of scarcity.&lt;/p&gt;

&lt;p&gt;I can remember when it shifted. With the first web pages in 96. When tables
were introduced in HTML, then it became less obvious how to recreate something
you saw, and having the possibility to browse the source of a page gives you
the exact recipe on how it&amp;rsquo;s made. So you can copy from it. I think open
source would not have had such a large adoption if there was not that idea
with the HTML, that you need to have access to the source to learn, reproduce
and improve.&lt;/p&gt;

&lt;p&gt;Also, it made even more obvious one of the key aspects of the internet age: by
dematerializing market goods (ie. with introduction of softwares), they became
reproducible at a cost that is marginal enough to be forgotten (yeah,
bandwidth and storage are not free, for sure). When you give it to someone,
you still have it. Not like that glass of beer. It placed us in an awkward
paradigm, the world of abundance.&lt;/p&gt;

&lt;p&gt;There have been so many efforts to artificially bend the internet to a world
of scarcity again. See, without scarcity, there is no economy as we know it.
There is another kind of economy, though, but the big guys that lead the old
one are not ready to let it go. For the old economy to work, things have to be
scarce. Otherwise there is no competition to obtain commodities, no motivation
to work like crazy to push forward the progress of production. In abundance
economy, also known as &lt;a href=&#34;https://en.wikipedia.org/wiki/Gift_economy&#34;&gt;gift economy&lt;/a&gt;, people get less likely to be
controlled and they don&amp;rsquo;t want to work hard, they want pleasure and
satisfaction.&lt;/p&gt;

&lt;p&gt;Honestly, I see the efforts made to control a resource that is naturally
abundant, by using the tools of law, copyright laws, patents, and all that
kind. I can&amp;rsquo;t help thinking about the abundance of material goods.
Technological progress, after war, promised some kind of abundant society.
Work would be automated so we would have less and less to work and just enjoy
the benefit of the global growth of humanity in taming the material world.
Well, we are far from it, and I&amp;rsquo;m instinctively convinced that it&amp;rsquo;s by design.
And it makes me sad. People still need jobs, society won&amp;rsquo;t provide for them.
There is nothing like common goods in that humanity. And now human compete
with machine for jobs, whereas they should have been allies. Sad, really.&lt;/p&gt;

&lt;p&gt;But this led me quite far away from my initial topic: we got limited seats for
this newsletter, so we&amp;rsquo;ll do it 2 ways. First, I will send a mail to all
people that never click on any links, ask them if they want to stay there.
Then after a time I will unsubscribe the ones that stay silent and inactive.
That could skim some 300 people maybe. At the rate it goes, that can buy us
some 6 months, at the current rate of newcomers each week.&lt;/p&gt;

&lt;p&gt;Then, the subscription will be closed, unless I setup another publication
system, self-hosted. We don&amp;rsquo;t really need a fully-blown solution like
mailchimp to be totally honest. They do bit efforts to have mail servers that
are compliant with various anti-spam techniques, and this is a great thing.
But I bet I should be able to match it on a self-hosted server that would cost
me less than $10 a month. It would have no limit, at least. Maybe at that time
I will open some kind of donation program. Actually I already pay for the
hosting but I use my servers for other usages so it&amp;rsquo;s only a small fraction.
And honestly I could even host GreenRuby web pages on github pages for free.
But I would not have access to the logs for analytics and would need to setup
some piwik because I can&amp;rsquo;t cope with the idea of using GA. Or, I just don&amp;rsquo;t
care about traffic metrics. That&amp;rsquo;s tempting. But I got lost in my train of
thoughts here.&lt;/p&gt;

&lt;p&gt;Bottom line is: we won&amp;rsquo;t get trapped by scarcity. Muahahaha. But feel free to
send me feedbacks on this topic if you have any thoughts.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Greenruby 173</title>
      <link>http://blog.mose.com/2016/05/29/greenruby-173</link>
      <pubDate>Sun, 29 May 2016 22:10:31 +0800</pubDate>
      
      <guid>http://blog.mose.com/2016/05/29/greenruby-173</guid>
      <description>

&lt;h2 id=&#34;greenruby-irl-and-remote-meetup:cb0f8bc8c9864210771f601228a96c48&#34;&gt;GreenRuby IRL and Remote meetup&lt;/h2&gt;

&lt;p&gt;Last week I posted a link about &lt;a href=&#34;http://remotemeetup.com/&#34;&gt;Remote Meetups&lt;/a&gt;, but, as it sometimes
happens, it didn&amp;rsquo;t stop there. The basic principle was appealing to me. It&amp;rsquo;s
true that we don&amp;rsquo;t all live in the Bay area or in New York. Having high
quality speakers in meetups is hard when you live in a small city or a remote
country. And this is exactly what that initiative tries to address.&lt;/p&gt;

&lt;p&gt;So I jumped in and had some talk with Franze. The result is that the GreenRuby
meetup we will have this friday will also be remote. Some people will &lt;a href=&#34;http://greenruby.kktix.cc/events/grg-001&#34;&gt;attend
physically&lt;/a&gt;, some people will &lt;a href=&#34;https://www.bigmarker.com/remote-meetup/Green-Ruby-Meetup-001&#34;&gt;come virtually&lt;/a&gt; using the
&lt;a href=&#34;https://www.bigmarker.com/communities/remote-meetup&#34;&gt;Bigmarker&lt;/a&gt; platform on the RemoteMeetup account.&lt;/p&gt;

&lt;p&gt;Those events usually are based on a format including a presentation followed
by interactions. My plan is to go nuts and try a full-social format, with no
presentation at all, jumping directly to the interactions. It&amp;rsquo;s going to be
highly experimental and may lead to failure, but it certainly won&amp;rsquo;t kill any
kitten in the process so I think we are safe.&lt;/p&gt;

&lt;p&gt;The mix between physical and remote event is the challenging part. We may try
the &lt;a href=&#34;https://bigmarker.zendesk.com/hc/en-us/articles/203332009-Attending-and-Hosting-Webinars&#34;&gt;usage of mobile phones&lt;/a&gt; to make local people become remote
participants (but it seems to be IOs only for now). I will get an iPad ready
for easier floating access, that can be fun.&lt;/p&gt;

&lt;p&gt;You are welcome to join, either online or irl. I heard &lt;a href=&#34;https://gandi.net&#34;&gt;Gandi&lt;/a&gt;, the
physical host and my employer, is going to fill up the fridge with hundred of
various beverages and won&amp;rsquo;t mind us to help reduce that quantity.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Greenruby 172</title>
      <link>http://blog.mose.com/2016/05/22/greenruby-172</link>
      <pubDate>Sun, 22 May 2016 22:10:31 +0800</pubDate>
      
      <guid>http://blog.mose.com/2016/05/22/greenruby-172</guid>
      <description>

&lt;h2 id=&#34;first-greenruby-meetup:0abecea4184e3afb12db751a6fc46d11&#34;&gt;First GreenRuby Meetup&lt;/h2&gt;

&lt;p&gt;Recently Gandi moved to a much bigger office in Neihu, Taipei. And I got
permission to use the space to organize events. We got a great space, sound
system with wireless mikes, a beamer for presentations. So, if you are in
Taipei, feel free to &lt;a href=&#34;http://greenruby.kktix.cc/events/grg-001&#34;&gt;join us on wednesday next week&lt;/a&gt;.  I will try to
make it a remote meetup, and give more details next week.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Greenruby 170</title>
      <link>http://blog.mose.com/2016/05/08/greenruby-170</link>
      <pubDate>Sun, 08 May 2016 22:10:31 +0800</pubDate>
      
      <guid>http://blog.mose.com/2016/05/08/greenruby-170</guid>
      <description>

&lt;h2 id=&#34;it-s-the-fault-of-the-bike:5828fd4de747cabcdfd7abec8b5b8468&#34;&gt;It&amp;rsquo;s the fault of the bike&lt;/h2&gt;

&lt;p&gt;Well, in the last two weeks I get short in links gathered on our slack pinned
list. Usually I&amp;rsquo;m reading various RSS feeds while commuting, and I post them
on slack, for later one pinning them. Then I have a script in go that will
grab all the pinned url, and remove the pins at the moment I use and check
them for inclusion in the publication.&lt;/p&gt;

&lt;p&gt;But 2 weeks ago, I decided to change my habits and go to the office by bike.
It&amp;rsquo;s a 30 minutes ride, and it&amp;rsquo;s very good. But then hare we are: no no way to
check RSS on the phone. I&amp;rsquo;m going to need to find another trick. Because I
won&amp;rsquo;t quit the biking.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Greenruby 168</title>
      <link>http://blog.mose.com/2016/04/25/greenruby-168</link>
      <pubDate>Mon, 25 Apr 2016 22:10:31 +0800</pubDate>
      
      <guid>http://blog.mose.com/2016/04/25/greenruby-168</guid>
      <description>

&lt;h2 id=&#34;nanoservices:037dc3f5d87e2e1488613d254aa9c717&#34;&gt;Nanoservices&lt;/h2&gt;

&lt;p&gt;That link to &lt;a href=&#34;http://shoutcloud.io&#34;&gt;Shoutcloud&lt;/a&gt; made me laugh and then made me think.
It&amp;rsquo;s not the first time I see some micro-service publicly available. 2 years
ago there was some talk about &lt;a href=&#34;http://www.infoq.com/news/2014/05/nano-services&#34;&gt;nano-services as an antipattern&lt;/a&gt;.
But when you push the logic a little further, and at a very large scale, maybe
it&amp;rsquo;s a projection of what the future will be.&lt;/p&gt;

&lt;p&gt;Imagine our software totally destructured, calling functions taht are stored
on the net, using some load balanced worldwide environment. We already do that
with CDNs. Javascript next Modules proposals will go in that direction as
well. But what is a method call in a program that we know today could become a
service call of an external globally available function.&lt;/p&gt;

&lt;p&gt;After all we always write the same code. How many time did you write a regexp
for &lt;a href=&#34;http://emailregex.com/&#34;&gt;email pattern validation&lt;/a&gt;? The RFC 822 and 5322 are nasties,
yeah. If we had no latency consideration, I would gladly delegate various
pieces of code to a specialized service. But latency, is it really an issue
now? We work more and more with async code, with queues and messages. What
seems heretic for our current legacy standards would not seem that foolish in
a slightly different context.&lt;/p&gt;

&lt;p&gt;So technically, I suppose nanoservices are a possible future. I even think
it&amp;rsquo;s a requirement for scaling any kind of agent-based architecture. Machine
learning will be much better off by just registering maps to knowledge than
knowledge itself. But I wonder about the economical side of things. The old
capitalist market economy is already stretching its reach far beyond its
original statement with immaterial economy. The totally destructured
immaterial one will certainly propose an interesting challenge.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Greenruby 166</title>
      <link>http://blog.mose.com/2016/04/10/greenruby-166</link>
      <pubDate>Sun, 10 Apr 2016 22:10:31 +0800</pubDate>
      
      <guid>http://blog.mose.com/2016/04/10/greenruby-166</guid>
      <description>

&lt;h2 id=&#34;go-again:16e33c9f1a3f0ada66ffc6cd616986d9&#34;&gt;Go again&lt;/h2&gt;

&lt;p&gt;That&amp;rsquo;s years that I&amp;rsquo;m trying to do something real with go. I mean, it is a
very attractive language with quite a special workflow and toolbox. From time
to time I write some small script for keeping contact with that language. Last
week I made &lt;a href=&#34;https://github.com/greenruby/slackpin/blob/master/pins.go&#34;&gt;this one&lt;/a&gt; to list links pinned in our Greenruby
slackroom to prepare the letter, So I can open them all at once to check them
in my browser. With time passing, seems that Go now has a really complete
collection of libraries for a lot of usages. I think I will have push a little
the slack api soon, and maybe do some real go coding.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Greenruby 165</title>
      <link>http://blog.mose.com/2016/04/03/greenruby-165</link>
      <pubDate>Sun, 03 Apr 2016 22:10:31 +0800</pubDate>
      
      <guid>http://blog.mose.com/2016/04/03/greenruby-165</guid>
      <description>

&lt;h2 id=&#34;aprils-lame-fools:04ce5954ad800128a33af7a0330e1817&#34;&gt;Aprils lame fools&lt;/h2&gt;

&lt;p&gt;I think there is nothing I hate more than pranks. It&amp;rsquo;s just another way to
bully someone else. Even innocent pranks are having victims. Single out the
one that fall for it to make laugh the ones that don&amp;rsquo;t. Well, I may very well
be a boring fellow. Or it&amp;rsquo;s just that, working so much with information
management, any perversion of it seems off.&lt;/p&gt;

&lt;p&gt;And then on april fools day, so much goes wrong. The net becomes unreliable.
So lame. But I&amp;rsquo;m not sure if it&amp;rsquo;s the reason there are not that many news
articles this week.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>