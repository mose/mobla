<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Gdb on Moselog</title>
    <link>http://blog.mose.com/tags/gdb/</link>
    <description>Recent content in Gdb on Moselog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 31 May 2015 12:10:31 +0800</lastBuildDate>
    <atom:link href="http://blog.mose.com/tags/gdb/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Greenruby 121</title>
      <link>http://blog.mose.com/2015/05/31/greenruby-121</link>
      <pubDate>Sun, 31 May 2015 12:10:31 +0800</pubDate>
      
      <guid>http://blog.mose.com/2015/05/31/greenruby-121</guid>
      <description>

&lt;h2 id=&#34;linux-trick-too-many-logs:195c338923f21c367264a5b5fb00e8a9&#34;&gt;linux trick: too many logs&lt;/h2&gt;

&lt;p&gt;Recently I found my self again in that situation on a linux server. The
partition where logs are stored went 100%. In such case, It&amp;rsquo;s clever top purge
old useless logfiles. Typical move for me would be to run logrotate manually
with&lt;/p&gt;

&lt;p&gt;logrotate -f /etc/logrotate.conf&lt;/p&gt;

&lt;p&gt;But I had a case where that was not enough. A developer forgot to remove a
debugging output and the logs were just gathering way too much information,
more than what I could free with some janitoring.&lt;/p&gt;

&lt;p&gt;To avoid losing logs, we can move the logfile where there is space and replace
the file with a symbolic link. That&amp;rsquo;s good enough for until the partition gets
resized of the logs get cleaned. But when it&amp;rsquo;s done on a live logfile, the
running process that writes into it still has the same file descriptor. The
process has to be relaunched so the new fd can be taken in account, on the new
partition, as instructed by the symbolic link.&lt;/p&gt;

&lt;p&gt;So a colleague pointed out that could be done without restart by using gdb.
It&amp;rsquo;s a pretty neat trick (if you have gdb installed on your production server,
which may not always be the case, and for good reasons). Anyways I had it at
hand, and here is the sequence:&lt;/p&gt;

&lt;p&gt;touch /path/to/new/logfile&lt;/p&gt;

&lt;p&gt;gdb -p pid&lt;/p&gt;

&lt;p&gt;(gdb) call dup(1)
  $1 = 3
  (gdb) call close(1)
  $2 = 0
  (gdb) call open(&amp;ldquo;/path/to/new/logfile&amp;rdquo;, 2)
  $3 = 1
  (gdb) call close($1)
  $4 = 0
  (gdb)&lt;/p&gt;

&lt;p&gt;This gave me the taste of digging up a little bit more on how gdb can interact
with live processes.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>