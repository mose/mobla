<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Devops on Moselog</title>
    <link>http://blog.mose.com/tags/devops/</link>
    <description>Recent content in Devops on Moselog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 07 Aug 2014 09:10:31 +0800</lastBuildDate>
    <atom:link href="http://blog.mose.com/tags/devops/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Digitalocean CLI</title>
      <link>http://blog.mose.com/2014/08/07/digitalocean-cli</link>
      <pubDate>Thu, 07 Aug 2014 09:10:31 +0800</pubDate>
      
      <guid>http://blog.mose.com/2014/08/07/digitalocean-cli</guid>
      <description>&lt;p&gt;We host some dev boxes on Digitalocean, and I tried varioous CLI because I like to stay in the console. Recently I was pretty happy to find Tugboat, as it saves default droplet size, region and image, and convers the whole API. Its fuzzy droplet name matching also can find great usage.&lt;/p&gt;

&lt;p&gt;The only problem it has, is its counter-intuitive damn name (I forgot how to launch it 2 hours after using it the first time haha).&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/pearkes/tugboat&#34;&gt;https://github.com/pearkes/tugboat&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;img src=&#34;http://res.cloudinary.com/mosepix/image/upload/devtips/2014-08-07-tugboat.png&#34; alt=&#34;tugboat&#34; class=&#34;pure-img&#34; /&gt;


</description>
    </item>
    
    <item>
      <title>Knife remote command</title>
      <link>http://blog.mose.com/2014/06/26/knife-remote-command</link>
      <pubDate>Thu, 26 Jun 2014 09:10:31 +0800</pubDate>
      
      <guid>http://blog.mose.com/2014/06/26/knife-remote-command</guid>
      <description>&lt;p&gt;Recently we switched from chef-solo to a chef-server setup on our infrastructure, a good occasion to refactor our recipes to better practices. I spent some time figuring out how to replace the &lt;code&gt;fabric&lt;/code&gt; scripts I had for remote execution of actions on various servers, by using a knife plugin. That way I can just use knife abilities and don&amp;rsquo;t need fabric anymore.&lt;/p&gt;

&lt;p&gt;So I created a new file in &lt;code&gt;.chef/plugins/knife/&lt;/code&gt; named &lt;code&gt;apt.rb&lt;/code&gt; for a test:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;chef/knife&#39;

module KnifeOpenvpn
  class Apt &amp;lt; Chef::Knife

    banner &amp;quot;knife apt &amp;lt;update|upgrade|simulate&amp;gt; &amp;lt;nodename&amp;gt;&amp;quot;

    deps do
      require &#39;chef/knife/ssh&#39;
      require &#39;chef/node&#39;
      Chef::Knife::Ssh.load_deps
    end

    def run
      if name_args.size == 2
        command_arg = name_args.shift
        server = name_args.shift
      else
        ui.fatal &amp;quot;Syntax: knife apt &amp;lt;update|upgrade|simulate&amp;gt; &amp;lt;nodename&amp;gt;&amp;quot;
        ui.fatal &amp;quot;Where &amp;lt;nodename&amp;gt; is a node name.&amp;quot;
        exit 1
      end
      command = case command_arg
                when &#39;update&#39;
                  &#39;update&#39;
                when &#39;upgrade&#39;
                  &#39;-y upgrade&#39;
                when &#39;simulate&#39;
                  &#39;-y -s upgrade&#39;
                end
      knife_ssh(Chef::Node.load(server).ipaddress, &amp;quot;sudo apt-get #{command}&amp;quot;).run
    end

    def knife_ssh(server, command)
      ssh = Chef::Knife::Ssh.new
      ssh.name_args = [ server, command ]
      ssh.config[:ssh_user] = Chef::Config[:knife][:ssh_user]
      ssh.config[:ssh_port] = Chef::Config[:knife][:ssh_port]
      ssh.config[:identity_file] = Chef::Config[:knife][:identity_file]
      ssh.config[:ssh_gateway] = Chef::Config[:knife][:ssh_gateway]
      ssh.config[:manual] = true
      ssh.config[:host_key_verify] = Chef::Config[:knife][:host_key_verify]
      ssh.config[:on_error] = :raise
      ssh
    end

  end

end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then I just run a &lt;code&gt;knife apt simulate my-server&lt;/code&gt; to execute a &lt;code&gt;apt-get -s -y upgrade&lt;/code&gt; on the &lt;code&gt;my-server&lt;/code&gt; client node. Pretty useful. But I guess that&amp;rsquo;s only a beginning, I should extend it to run on various nodes at the same time and maybe inside threads or something like that, to match the &lt;code&gt;fabric&lt;/code&gt; power.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>